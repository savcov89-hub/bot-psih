import asyncio
import os
import logging
import sys
import sqlite3
from datetime import datetime, timedelta
import uuid

from dotenv import load_dotenv
from yookassa import Configuration, Payment
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from openai import AsyncOpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ADMIN_ID = os.getenv("ADMIN_ID")
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 8000))

if not all([TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, ADMIN_ID, YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY]):
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –∫–ª—é—á–∏ –ÆKassa")

Configuration.configure(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# --- –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã ---
PLAN_GENERATION_PROMPT = """
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–º–µ—Ç–æ–¥–æ–ª–æ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –ø–ª–∞–Ω –∏–∑ 3-4 —Å–µ—Å—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –µ–≥–æ –ø—Ä–æ–±–ª–µ–º—É.
–í–æ–ø—Ä–æ—Å 1 (–ü—Ä–æ–±–ª–µ–º–∞): {q1}
–í–æ–ø—Ä–æ—Å 2 (–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç): {q2}
–í–æ–ø—Ä–æ—Å 3 (–ß—Ç–æ –º–µ—à–∞–µ—Ç): {q3}
–í–æ–ø—Ä–æ—Å 4 (–ß—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª): {q4}
–í–æ–ø—Ä–æ—Å 5 (–ö–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏): {q5}

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã**
–î–∞–ª–µ–µ –ø–æ –ø—É–Ω–∫—Ç–∞–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:
**–°–µ—Å—Å–∏—è 1:** [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏]. [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å].
**–°–µ—Å—Å–∏—è 2:** [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏]. [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ].
**–°–µ—Å—Å–∏—è 3:** [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏]. [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ].
"""

SESSION_PROMPT = """
–¢—ã ‚Äî AI-–ø—Å–∏—Ö–æ–ª–æ–≥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ –º–µ—Ç–æ–¥—É –ö–ü–¢. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –±—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º, —ç–º–ø–∞—Ç–∏—á–Ω—ã–º –∏ –≤–µ—Å—Ç–∏ –µ–≥–æ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω—É.

**–í–æ—Ç –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
{plan}

–ù–∞—á–Ω–∏ –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é. –ü–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è, —É–ø–æ–º—è–Ω–∏ –ø–µ—Ä–≤—É—é —Ç–µ–º—É –∏–∑ –ø–ª–∞–Ω–∞ –∏ –∑–∞–¥–∞–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –µ—ë –æ–±—Å—É–∂–¥–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥ –Ω–∞—á–∞—Ç—å –Ω–∞—à—É —Ä–∞–±–æ—Ç—É. –°–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–µ–º—É –ø–ª–∞–Ω—É, –ø–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è –ø–æ—Å–≤—è—â–µ–Ω–∞ [—Ç–µ–º–∞ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏]. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å –Ω–∞ —É–º–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É?"

–í–µ–¥–∏ –¥–∏–∞–ª–æ–≥, –ø–æ–º–æ–≥–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∑–∞–¥–∞–≤–∞–π –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑.
"""

# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
DB_FILE = "bot_data.db"

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS analytics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            event_type TEXT NOT NULL,
            timestamp DATETIME NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            subscription_status TEXT DEFAULT 'free',
            subscription_expires_at DATETIME,
            yookassa_payment_method_id TEXT,
            session_plan TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS promo_codes (
            code TEXT PRIMARY KEY,
            duration_days INTEGER NOT NULL,
            is_active INTEGER DEFAULT 1
        )
    ''')
    conn.commit()
    conn.close()

def log_event(user_id: int, event_type: str):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    timestamp = datetime.utcnow()
    cursor.execute(
        "INSERT INTO analytics (user_id, event_type, timestamp) VALUES (?, ?, ?)",
        (user_id, event_type, timestamp)
    )
    conn.commit()
    conn.close()

def ensure_user_exists(user_id: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
    conn.close()

async def is_user_subscribed(user_id: int) -> bool:
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT subscription_status, subscription_expires_at FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        status, expires_at_str = result
        if status == 'paid' and expires_at_str:
            expires_at = datetime.fromisoformat(expires_at_str)
            if expires_at > datetime.utcnow():
                return True
    return False

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–¢–ò–ö–ò ---
def get_stats_for_period(date_filter: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute(f"SELECT COUNT(DISTINCT user_id) FROM analytics WHERE event_type = 'start_command' {date_filter.replace('WHERE', 'AND') if date_filter else ''}")
    start_users = cursor.fetchone()[0]

    cursor.execute(f"SELECT COUNT(DISTINCT user_id) FROM analytics {date_filter}")
    total_users = cursor.fetchone()[0]
    
    cursor.execute(f"""
        SELECT COUNT(*) FROM (
            SELECT user_id FROM analytics 
            {date_filter} {'AND' if date_filter else 'WHERE'} event_type = 'message_sent' 
            GROUP BY user_id 
            HAVING COUNT(*) > 5
        )
    """)
    active_users = cursor.fetchone()[0]
    
    conn.close()
    return {"start": start_users, "total": total_users, "active": active_users}

def format_change(current, previous):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏."""
    if previous == 0:
        if current > 0:
            return f"\n‚îî‚îÄ `(+{current} vs 0)`"
        return "\n‚îî‚îÄ `(–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)`"

    absolute_diff = current - previous
    
    if absolute_diff == 0:
        return "\n‚îî‚îÄ `(–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)`"
        
    percent_change = (absolute_diff / previous) * 100
    
    sign = "+" if absolute_diff > 0 else ""
    emoji = "üìà" if absolute_diff > 0 else "üìâ"
    
    return f"\n‚îî‚îÄ `{sign}{absolute_diff} ({sign}{percent_change:.0f}%) {emoji}`"

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (FSM) ---
class UserJourney(StatesGroup):
    survey_q1 = State()
    survey_q2 = State()
    survey_q3 = State()
    survey_q4 = State()
    survey_q5 = State()
    plan_confirmation = State()
    waiting_for_promo = State()
    in_session = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
agree_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–Ø –ø–æ–Ω–∏–º–∞—é –∏ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree_pressed")]])
plan_confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å", callback_data="plan_accept")]])
my_subscription_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="cancel_subscription")]])
payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å 250 ‚ÇΩ", callback_data="pay_subscription")],
    [InlineKeyboardButton(text="üéÅ –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")]
])
stats_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="stats_today"), InlineKeyboardButton(text="–í—á–µ—Ä–∞", callback_data="stats_yesterday")],
    [InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="stats_7d"), InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="stats_30d")],
    [InlineKeyboardButton(text="–°—Ä–∞–≤–Ω–∏—Ç—å 7 –¥–Ω–µ–π", callback_data="stats_compare7d")],
    [InlineKeyboardButton(text="–°—Ä–∞–≤–Ω–∏—Ç—å 30 –¥–Ω–µ–π", callback_data="stats_compare30d")],
    [InlineKeyboardButton(text="–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="stats_all")]
])
back_to_stats_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="stats_back")]
])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Handlers) ---
@dp.message(CommandStart())
async def send_welcome(message: Message, state: FSMContext):
    ensure_user_exists(message.from_user.id)
    log_event(message.from_user.id, 'start_command')
    await state.clear()
    welcome_text = (
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—ã—à–ª–µ–Ω–∏–µ–º.\n\n"
        "**‚ùóÔ∏è –í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:**\n"
        "–Ø —è–≤–ª—è—é—Å—å AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –∏ –Ω–µ –º–æ–≥—É –∑–∞–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –ï—Å–ª–∏ –≤—ã –≤ –∫—Ä–∏–∑–∏—Å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é."
    )
    is_subscribed = await is_user_subscribed(message.from_user.id)
    if is_subscribed:
        await message.answer(f"{welcome_text}\n\n–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ. –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription.", parse_mode="Markdown")
    else:
        await message.answer(f"{welcome_text}\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /promo.", reply_markup=agree_keyboard, parse_mode="Markdown")

@dp.message(Command("stop"), StateFilter("*"))
async def stop_session(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start.")

@dp.message(Command("stats"), StateFilter("*"))
async def stats_command(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=stats_keyboard)

@dp.callback_query(F.data == "stats_back")
async def handle_stats_back(callback_query: types.CallbackQuery):
    if str(callback_query.from_user.id) != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        return
    await callback_query.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=stats_keyboard
    )
    await callback_query.answer()

@dp.callback_query(F.data.startswith("stats_"))
async def handle_stats_period(callback_query: types.CallbackQuery):
    if str(callback_query.from_user.id) != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        return

    period = callback_query.data.split("_")[1]
    stats_text = ""

    if period in ["today", "yesterday", "7d", "30d", "all"]:
        date_filter_map = {
            "today": "WHERE DATE(timestamp) = DATE('now', 'utc')",
            "yesterday": "WHERE DATE(timestamp) = DATE('now', '-1 day', 'utc')",
            "7d": "WHERE DATE(timestamp) >= DATE('now', '-7 days', 'utc')",
            "30d": "WHERE DATE(timestamp) >= DATE('now', '-30 days', 'utc')",
            "all": ""
        }
        period_text_map = {
            "today": "–∑–∞ —Å–µ–≥–æ–¥–Ω—è", "yesterday": "–∑–∞ –≤—á–µ—Ä–∞", "7d": "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
            "30d": "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "all": "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"
        }
        
        stats = get_stats_for_period(date_filter_map[period])
        stats_text = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ {period_text_map[period]}**\n\n"
            f"‚ñ´Ô∏è **–ù–∞–∂–∞–ª–∏ /start:** {stats['start']} —á–µ–ª.\n"
            f"‚ñ´Ô∏è **–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö:** {stats['total']} —á–µ–ª.\n"
            f"‚ñ´Ô∏è **–ê–∫—Ç–∏–≤–Ω—ã–µ (> 5):** {stats['active']} —á–µ–ª."
        )
    
    elif period in ["compare7d", "compare30d"]:
        days = 7 if period == "compare7d" else 30
        
        current_filter = f"WHERE DATE(timestamp) >= DATE('now', '-{days} days', 'utc')"
        current_stats = get_stats_for_period(current_filter)

        previous_filter = f"WHERE DATE(timestamp) >= DATE('now', '-{days*2} days', 'utc') AND DATE(timestamp) < DATE('now', '-{days} days', 'utc')"
        previous_stats = get_stats_for_period(previous_filter)
        
        stats_text = (
            f"üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {days} –¥–Ω–µ–π**\n"
            f"_(–ü–æ—Å–ª–µ–¥–Ω–∏–µ {days} vs. –ü—Ä–µ–¥—ã–¥—É—â–∏–µ {days})_\n\n"
            f"‚ñ´Ô∏è **–ù–∞–∂–∞–ª–∏ /start:** {current_stats['start']} (vs {previous_stats['start']}){format_change(current_stats['start'], previous_stats['start'])}\n"
            f"‚ñ´Ô∏è **–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö:** {current_stats['total']} (vs {previous_stats['total']}){format_change(current_stats['total'], previous_stats['total'])}\n"
            f"‚ñ´Ô∏è **–ê–∫—Ç–∏–≤–Ω—ã–µ (> 5):** {current_stats['active']} (vs {previous_stats['active']}){format_change(current_stats['active'], previous_stats['active'])}"
        )
    
    if stats_text:
        await callback_query.message.edit_text(stats_text, parse_mode="Markdown", reply_markup=back_to_stats_keyboard)

    await callback_query.answer()

@dp.message(Command("promo"), StateFilter("*"))
async def promo_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(UserJourney.waiting_for_promo)

@dp.message(UserJourney.waiting_for_promo)
async def process_promo_code(message: Message, state: FSMContext):
    code = message.text.strip().upper()
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT duration_days FROM promo_codes WHERE code = ? AND is_active = 1", (code,))
    result = cursor.fetchone()

    if result:
        duration_days = result[0]
        expires_at = datetime.utcnow() + timedelta(days=duration_days)
        cursor.execute(
            "UPDATE users SET subscription_status = ?, subscription_expires_at = ? WHERE user_id = ?",
            ('paid', expires_at.isoformat(), message.from_user.id)
        )
        cursor.execute("UPDATE promo_codes SET is_active = 0 WHERE code = ?", (code,))
        conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –Ω–∞ {duration_days} –¥–Ω–µ–π.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")

    conn.close()
    await state.clear()

@dp.message(Command("subscription"), StateFilter("*"))
async def subscription_command(message: Message):
    is_subscribed = await is_user_subscribed(message.from_user.id)
    if is_subscribed:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=my_subscription_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

@dp.callback_query(F.data == "cancel_subscription")
async def cancel_subscription_handler(callback_query: types.CallbackQuery):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET yookassa_payment_method_id = NULL WHERE user_id = ?", (callback_query.from_user.id,))
    conn.commit()
    conn.close()
    await callback_query.message.edit_text("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")

@dp.callback_query(F.data == "agree_pressed")
async def start_survey(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, –æ—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "**1. –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, –∫–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä—É–¥–Ω–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Å–µ–π—á–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?**",
        parse_mode="Markdown"
    )
    await state.set_state(UserJourney.survey_q1)
    await callback_query.answer()

@dp.message(UserJourney.survey_q1)
async def process_survey_q1(message: Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await message.answer("**2. –ö–∞–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ—Å—Ç–∏—á—å –≤ –∏–¥–µ–∞–ª–µ? –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è?**", parse_mode="Markdown")
    await state.set_state(UserJourney.survey_q2)

@dp.message(UserJourney.survey_q2)
async def process_survey_q2(message: Message, state: FSMContext):
    await state.update_data(q2=message.text)
    await message.answer("**3. –ö–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–µ—à–∞–µ—Ç –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞?**", parse_mode="Markdown")
    await state.set_state(UserJourney.survey_q3)

@dp.message(UserJourney.survey_q3)
async def process_survey_q3(message: Message, state: FSMContext):
    await state.update_data(q3=message.text)
    await message.answer("**4. –ß—Ç–æ –≤—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –¥–µ–ª–∞—Ç—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã?**", parse_mode="Markdown")
    await state.set_state(UserJourney.survey_q4)

@dp.message(UserJourney.survey_q4)
async def process_survey_q4(message: Message, state: FSMContext):
    await state.update_data(q4=message.text)
    await message.answer("**5. –ö–∞–∫ —ç—Ç–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∏–∑–±–µ–≥–∞—é –æ–±—â–µ–Ω–∏—è', '–æ—Ç–∫–ª–∞–¥—ã–≤–∞—é –¥–µ–ª–∞')**", parse_mode="Markdown")
    await state.set_state(UserJourney.survey_q5)

@dp.message(UserJourney.survey_q5)
async def process_survey_q5_and_generate_plan(message: Message, state: FSMContext):
    await state.update_data(q5=message.text)
    user_data = await state.get_data()
    
    thinking_message = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω... üß†")
    try:
        prompt = PLAN_GENERATION_PROMPT.format(
            q1=user_data.get('q1'), q2=user_data.get('q2'), q3=user_data.get('q3'),
            q4=user_data.get('q4'), q5=user_data.get('q5')
        )
        response = await openai_client.chat.completions.create(
            model="gpt-4o", messages=[{"role": "user", "content": prompt}], temperature=0.7
        )
        plan_text = response.choices[0].message.content

        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET session_plan = ? WHERE user_id = ?", (plan_text, message.from_user.id))
        conn.commit()
        conn.close()

        await thinking_message.edit_text(
            f"{plan_text}\n\n–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=plan_confirm_keyboard, parse_mode="Markdown"
        )
        await state.set_state(UserJourney.plan_confirmation)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
        await thinking_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start")
        await state.clear()

@dp.callback_query(F.data == "plan_accept", UserJourney.plan_confirmation)
async def show_payment_options(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–æ—Å—Ç—É–ø –∫ —Å–µ—Å—Å–∏—è–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
        "**–¢–∞—Ä–∏—Ñ:**\n"
        "‚ñ´Ô∏è **250 —Ä—É–±–ª–µ–π** –∑–∞ 7 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=payment_keyboard,
        parse_mode="Markdown"
    )
    await callback_query.answer()

@dp.callback_query(F.data == "pay_subscription", UserJourney.plan_confirmation)
async def offer_payment(callback_query: types.CallbackQuery, state: FSMContext):
    PRICE = 250.00
    payment = Payment.create({
        "amount": {"value": f"{PRICE:.2f}", "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": f"https://t.me/{(await bot.get_me()).username}"},
        "capture": True,
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π (—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º)",
        "save_payment_method": True,
        "metadata": {"user_id": callback_query.from_user.id, "duration_days": 7}
    }, uuid.uuid4())
    
    await callback_query.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment.confirmation.confirmation_url)]])
    )
    await callback_query.answer()
    await state.clear()

@dp.callback_query(F.data == "enter_promo", UserJourney.plan_confirmation)
async def ask_for_promo(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(UserJourney.waiting_for_promo)
    await callback_query.answer()

async def yookassa_webhook_handler(request):
    try:
        event_json = await request.json()
        payment = event_json.get('object')

        if payment and payment.get('status') == 'succeeded' and payment.get('paid'):
            user_id = int(payment['metadata']['user_id'])
            duration_days = int(payment['metadata'].get('duration_days', 7))
            expires_at = datetime.utcnow() + timedelta(days=duration_days)

            conn = sqlite3.connect(DB_FILE)
            cursor = conn.cursor()

            payment_method_id = payment.get('payment_method', {}).get('id')
            cursor.execute(
                "UPDATE users SET subscription_status = ?, subscription_expires_at = ?, yookassa_payment_method_id = ? WHERE user_id = ?",
                ('paid', expires_at.isoformat(), payment_method_id, user_id)
            )
            conn.commit()
            conn.close()
            await bot.send_message(user_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {duration_days} –¥–Ω–µ–π.\n\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—à—É –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ –≤–∞—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ÆKassa: {e}")
    return web.Response(status=200)

async def charge_recurring_payments():
    logging.info("Starting recurring payment check...")
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, yookassa_payment_method_id FROM users WHERE subscription_status = 'paid' AND subscription_expires_at < ? AND yookassa_payment_method_id IS NOT NULL", (datetime.utcnow(),))

    users_to_charge = cursor.fetchall()
    conn.close()

    for user_id, payment_method_id in users_to_charge:
        try:
            Payment.create({
                "amount": {"value": "250.00", "currency": "RUB"},
                "capture": True,
                "payment_method_id": payment_method_id,
                "description": "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 7 –¥–Ω–µ–π",
                "metadata": {"user_id": user_id, "duration_days": 7}
            })
            logging.info(f"Successfully charged user {user_id}")
        except Exception as e:
            logging.error(f"Failed to charge user {user_id}: {e}")
            await bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∫–∞—Ä—Ç—É –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")

@dp.message(F.text, UserJourney.in_session)
async def handle_paid_session(message: Message, state: FSMContext):
    data = await state.get_data()
    messages_history = data.get("messages", [])

    messages_history.append({"role": "user", "content": message.text})

    thinking_message = await message.answer("–î—É–º–∞—é...")
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=messages_history,
            temperature=0.75,
        )
        gpt_answer = response.choices[0].message.content
        messages_history.append({"role": "assistant", "content": gpt_answer})
        await state.update_data(messages=messages_history)
        await thinking_message.edit_text(gpt_answer)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_paid_session: {e}")
        await thinking_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message()
async def handle_other_messages(message: Message, state: FSMContext):
    is_subscribed = await is_user_subscribed(message.from_user.id)
    current_state = await state.get_state()

    if is_subscribed and current_state is None:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT session_plan FROM users WHERE user_id = ?", (message.from_user.id,))
        result = cursor.fetchone()
        conn.close()

        session_plan = result[0] if result and result[0] else "–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."

        personalized_prompt = SESSION_PROMPT.format(plan=session_plan)
        
        await state.set_state(UserJourney.in_session)
        
        first_message_response = await openai_client.chat.completions.create(
            model="gpt-4o", messages=[{"role": "system", "content": personalized_prompt}], temperature=0.7
        )
        first_message = first_message_response.choices[0].message.content
        
        await state.update_data(messages=[
            {"role": "system", "content": personalized_prompt},
            {"role": "assistant", "content": first_message}
        ])
        
        await message.answer(first_message)
    else:
        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ---
async def on_startup_scheduler(app):
    scheduler = AsyncIOScheduler(timezone="UTC")
    scheduler.add_job(charge_recurring_payments, 'cron', day_of_week='*', hour=10, minute=0)
    scheduler.start()

async def on_startup(bot: Bot) -> None:
    webhook_url_from_env = os.getenv("WEBHOOK_URL")
    if webhook_url_from_env:
        await bot.set_webhook(f"{webhook_url_from_env}/webhook")
    else:
        logging.warning("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def on_shutdown(bot: Bot) -> None:
    await bot.delete_webhook()

def main() -> None:
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    app = web.Application()
    app.on_startup.append(on_startup_scheduler)

    webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_requests_handler.register(app, path="/webhook")
    app.router.add_post("/yookassa_webhook", yookassa_webhook_handler)
    
    setup_application(app, dp, bot=bot)
    
    web.run_app(app, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)

if __name__ == "__main__":
    init_db()
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    main()