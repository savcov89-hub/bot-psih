import asyncio
import os
import logging
import sys
import sqlite3
from datetime import datetime

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from openai import AsyncOpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ADMIN_ID = os.getenv("ADMIN_ID")

WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 8000))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY or not ADMIN_ID:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å TELEGRAM_BOT_TOKEN, OPENAI_API_KEY –∏ ADMIN_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# --- –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã ---
CBT_PROMPT = "..." # –í–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –ö–ü–¢
COACH_PROMPT = "..." # –í–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –ö–æ—É—á–∞

# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• –ê–ù–ê–õ–ò–¢–ò–ö–ò ---
DB_FILE = "analytics.db"

def init_db():
    # ... (–∫–æ–¥ init_db –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def log_event(user_id: int, event_type: str):
    # ... (–∫–æ–¥ log_event –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (FSM) ---
class UserState(StatesGroup):
    choosing_mode = State()
    in_session = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
agree_button = InlineKeyboardButton(text="–Ø –ø–æ–Ω–∏–º–∞—é –∏ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree_pressed")
agree_keyboard = InlineKeyboardMarkup(inline_keyboard=[[agree_button]])

mode_cbt_button = InlineKeyboardButton(text="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è (–ö–ü–¢)", callback_data="mode_cbt")
mode_coach_button = InlineKeyboardButton(text="–ö–æ—É—á–∏–Ω–≥", callback_data="mode_coach")
mode_keyboard = InlineKeyboardMarkup(inline_keyboard=[[mode_cbt_button], [mode_coach_button]])

# –ù–û–í–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –í–´–ë–û–†–ê –ü–ï–†–ò–û–î–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò
stats_today_button = InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="stats_today")
stats_yesterday_button = InlineKeyboardButton(text="–í—á–µ—Ä–∞", callback_data="stats_yesterday")
stats_7d_button = InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="stats_7d")
stats_30d_button = InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="stats_30d")
stats_all_button = InlineKeyboardButton(text="–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="stats_all")
stats_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [stats_today_button, stats_yesterday_button],
    [stats_7d_button, stats_30d_button],
    [stats_all_button]
])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Handlers) ---
# ... (–∫–æ–¥ –¥–ª—è /start, /stop, handle_agree, handle_mode_choice –∏ handle_session_message –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –•–ï–ù–î–õ–ï–† /stats: —Ç–µ–ø–µ—Ä—å –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é
@dp.message(Command("stats"), StateFilter("*"))
async def stats_command(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=stats_keyboard)

# –ù–û–í–´–ô –•–ï–ù–î–õ–ï–†: –ª–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query(F.data.startswith("stats_"))
async def handle_stats_period(callback_query: types.CallbackQuery):
    period = callback_query.data.split("_")[1]
    
    date_filter = ""
    period_text = ""
    
    if period == "today":
        date_filter = "WHERE DATE(timestamp) = DATE('now', 'utc')"
        period_text = "–∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    elif period == "yesterday":
        date_filter = "WHERE DATE(timestamp) = DATE('now', '-1 day', 'utc')"
        period_text = "–∑–∞ –≤—á–µ—Ä–∞"
    elif period == "7d":
        date_filter = "WHERE DATE(timestamp) >= DATE('now', '-7 days', 'utc')"
        period_text = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
    elif period == "30d":
        date_filter = "WHERE DATE(timestamp) >= DATE('now', '-30 days', 'utc')"
        period_text = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
    elif period == "all":
        date_filter = ""
        period_text = "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # 1. –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–∂–∞–≤—à–∏—Ö /start
    cursor.execute(f"SELECT COUNT(DISTINCT user_id) FROM analytics WHERE event_type = 'start_command' {date_filter.replace('WHERE', 'AND') if date_filter else ''}")
    start_users = cursor.fetchone()[0]

    # 2. –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute(f"SELECT COUNT(DISTINCT user_id) FROM analytics {date_filter}")
    total_users = cursor.fetchone()[0]
    
    # 3. –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –í–∞–∂–Ω–æ: —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –¥–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    cursor.execute(f"""
        SELECT COUNT(*) FROM (
            SELECT user_id FROM analytics 
            {date_filter} {'AND' if date_filter else 'WHERE'} event_type = 'message_sent' 
            GROUP BY user_id 
            HAVING COUNT(*) > 5
        )
    """)
    active_users = cursor.fetchone()[0]
    
    conn.close()

    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ {period_text}**\n\n"
        f"‚ñ´Ô∏è **–ù–∞–∂–∞–ª–∏ /start:** {start_users} —á–µ–ª.\n"
        f"‚ñ´Ô∏è **–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users} —á–µ–ª.\n"
        f"‚ñ´Ô∏è **–ê–∫—Ç–∏–≤–Ω—ã–µ (–±–æ–ª–µ–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π):** {active_users} —á–µ–ª."
    )
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –æ—Ç—á–µ—Ç
    await callback_query.message.edit_text(stats_text, parse_mode="Markdown")
    await callback_query.answer()

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

if __name__ == "__main__":
    init_db()
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    main()