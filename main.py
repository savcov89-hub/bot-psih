import asyncio
import os
import logging
import sys
import sqlite3
from datetime import datetime, timedelta
import uuid

from dotenv import load_dotenv
from yookassa import Configuration, Payment
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import Bot, Dispatcher, F, types, BaseMiddleware
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from openai import AsyncOpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ADMIN_ID = os.getenv("ADMIN_ID")
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 8000))

if not all([TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, ADMIN_ID, YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY]):
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –∫–ª—é—á–∏ –ÆKassa")

Configuration.configure(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# ... (–í–∞—à–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, PLAN_GENERATION_PROMPT) ...

# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
DB_FILE = "bot_data.db"

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS analytics (id INTEGER PRIMARY KEY, user_id INTEGER, event_type TEXT, timestamp DATETIME)')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            subscription_status TEXT DEFAULT 'free',
            subscription_expires_at DATETIME,
            yookassa_payment_method_id TEXT 
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS promo_codes (
            code TEXT PRIMARY KEY,
            duration_days INTEGER NOT NULL,
            is_active INTEGER DEFAULT 1
        )
    ''')
    conn.commit()
    conn.close()

def ensure_user_exists(user_id: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
    conn.close()

async def is_user_subscribed(user_id: int) -> bool:
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT subscription_status, subscription_expires_at FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        status, expires_at_str = result
        if status == 'paid' and expires_at_str:
            expires_at = datetime.fromisoformat(expires_at_str)
            if expires_at > datetime.utcnow():
                return True
    return False

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (FSM) ---
class UserJourney(StatesGroup):
    survey_q1 = State()
    survey_q2 = State()
    plan_confirmation = State()
    waiting_for_promo = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
agree_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–Ø –ø–æ–Ω–∏–º–∞—é –∏ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree_pressed")]])
plan_confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å", callback_data="plan_accept")]])
my_subscription_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="cancel_subscription")]])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Handlers) ---
@dp.message(CommandStart())
async def send_welcome(message: Message, state: FSMContext):
    ensure_user_exists(message.from_user.id)
    await state.clear()
    welcome_text = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç..." # –í–∞—à–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    
    is_subscribed = await is_user_subscribed(message.from_user.id)
    if is_subscribed:
        await message.answer(f"{welcome_text}\n\n–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. –ß—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –µ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription.", parse_mode="Markdown")
    else:
        await message.answer(f"{welcome_text}\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /promo.", reply_markup=agree_keyboard, parse_mode="Markdown")

@dp.message(Command("promo"), StateFilter("*"))
async def promo_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(UserJourney.waiting_for_promo)

@dp.message(UserJourney.waiting_for_promo)
async def process_promo_code(message: Message, state: FSMContext):
    code = message.text.strip().upper()
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT duration_days FROM promo_codes WHERE code = ? AND is_active = 1", (code,))
    result = cursor.fetchone()
    
    if result:
        duration_days = result[0]
        expires_at = datetime.utcnow() + timedelta(days=duration_days)
        cursor.execute(
            "UPDATE users SET subscription_status = ?, subscription_expires_at = ? WHERE user_id = ?",
            ('paid', expires_at.isoformat(), message.from_user.id)
        )
        cursor.execute("UPDATE promo_codes SET is_active = 0 WHERE code = ?", (code,))
        conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –Ω–∞ {duration_days} –¥–Ω–µ–π.")
    else:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
    
    conn.close()
    await state.clear()

@dp.message(Command("subscription"), StateFilter("*"))
async def subscription_command(message: Message):
    is_subscribed = await is_user_subscribed(message.from_user.id)
    if is_subscribed:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=my_subscription_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

@dp.callback_query(F.data == "cancel_subscription")
async def cancel_subscription_handler(callback_query: types.CallbackQuery):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET yookassa_payment_method_id = NULL WHERE user_id = ?", (callback_query.from_user.id,))
    conn.commit()
    conn.close()
    await callback_query.message.edit_text("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")

# ... (–ö–æ–¥ –æ–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: start_survey, process_survey_q1, process_survey_q2_and_generate_plan) ...

@dp.callback_query(F.data == "plan_accept", UserJourney.plan_confirmation)
async def offer_payment(callback_query: types.CallbackQuery, state: FSMContext):
    PRICE = 250.00
    payment = Payment.create({
        "amount": {"value": f"{PRICE:.2f}", "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": f"https://t.me/{(await bot.get_me()).username}"},
        "capture": True,
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π (—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º)",
        "save_payment_method": True,
        "metadata": {"user_id": callback_query.from_user.id, "duration_days": 7}
    }, uuid.uuid4())
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å 250 ‚ÇΩ", url=payment.confirmation.confirmation_url)]])
    await callback_query.message.edit_text(
        "**–¢–∞—Ä–∏—Ñ:**\n‚ñ´Ô∏è **250 —Ä—É–±–ª–µ–π** –∑–∞ 7 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
        reply_markup=keyboard, parse_mode="Markdown"
    )

async def yookassa_webhook_handler(request):
    try:
        event_json = await request.json()
        payment = event_json.get('object')
        
        if payment and payment.get('status') == 'succeeded' and payment.get('paid'):
            user_id = int(payment['metadata']['user_id'])
            duration_days = int(payment['metadata'].get('duration_days', 7))
            expires_at = datetime.utcnow() + timedelta(days=duration_days)
            
            conn = sqlite3.connect(DB_FILE)
            cursor = conn.cursor()
            
            payment_method_id = payment.get('payment_method', {}).get('id')
            cursor.execute(
                "UPDATE users SET subscription_status = ?, subscription_expires_at = ?, yookassa_payment_method_id = ? WHERE user_id = ?",
                ('paid', expires_at.isoformat(), payment_method_id, user_id)
            )
            conn.commit()
            conn.close()
            await bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {duration_days} –¥–Ω–µ–π.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ÆKassa: {e}")
    return web.Response(status=200)

async def charge_recurring_payments():
    logging.info("Starting recurring payment check...")
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, yookassa_payment_method_id FROM users WHERE subscription_status = 'paid' AND subscription_expires_at < ? AND yookassa_payment_method_id IS NOT NULL", (datetime.utcnow(),))
    
    users_to_charge = cursor.fetchall()
    conn.close()

    for user_id, payment_method_id in users_to_charge:
        try:
            Payment.create({
                "amount": {"value": "250.00", "currency": "RUB"},
                "capture": True,
                "payment_method_id": payment_method_id,
                "description": "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 7 –¥–Ω–µ–π",
                "metadata": {"user_id": user_id, "duration_days": 7}
            })
            logging.info(f"Successfully charged user {user_id}")
        except Exception as e:
            logging.error(f"Failed to charge user {user_id}: {e}")
            await bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∫–∞—Ä—Ç—É –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ---
async def on_startup(bot: Bot) -> None:
    webhook_url_from_env = os.getenv("WEBHOOK_URL")
    await bot.set_webhook(f"{webhook_url_from_env}/webhook")

async def on_shutdown(bot: Bot) -> None:
    await bot.delete_webhook()

def main() -> None:
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_requests_handler.register(app, path="/webhook")
    app.router.add_post("/yookassa_webhook", yookassa_webhook_handler)
    setup_application(app, dp, bot=bot)
    
    scheduler = AsyncIOScheduler(timezone="UTC")
    scheduler.add_job(charge_recurring_payments, 'cron', day_of_week='*', hour=10, minute=0) # –†–∞–∑ –≤ –¥–µ–Ω—å
    scheduler.start()
    
    web.run_app(app, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)

if __name__ == "__main__":
    init_db()
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    main()