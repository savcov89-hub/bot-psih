import asyncio
import os
import logging
import sys
import sqlite3 # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π
from datetime import datetime # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from openai import AsyncOpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL") 
# –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID, —á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ –≤—ã –º–æ–≥–ª–∏ –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
ADMIN_ID = os.getenv("ADMIN_ID") 

WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 8000))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY or not ADMIN_ID:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å TELEGRAM_BOT_TOKEN, OPENAI_API_KEY –∏ ADMIN_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# --- –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã ---
CBT_PROMPT = "..." # –í–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –ö–ü–¢
COACH_PROMPT = "..." # –í–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –ö–æ—É—á–∞

# --- –ù–û–í–´–ô –ë–õ–û–ö: –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• –ê–ù–ê–õ–ò–¢–ò–ö–ò ---

DB_FILE = "analytics.db"

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS analytics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            event_type TEXT NOT NULL,
            timestamp DATETIME NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

def log_event(user_id: int, event_type: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    timestamp = datetime.utcnow()
    cursor.execute(
        "INSERT INTO analytics (user_id, event_type, timestamp) VALUES (?, ?, ?)",
        (user_id, event_type, timestamp)
    )
    conn.commit()
    conn.close()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class UserState(StatesGroup):
    # ... (–∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–π)

# ... (–∫–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Handlers) ---
@dp.message(CommandStart())
async def send_welcome(message: Message, state: FSMContext):
    # –õ–û–ì–ò–†–£–ï–ú –°–û–ë–´–¢–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /start
    log_event(message.from_user.id, 'start_command')
    
    await state.clear()
    # ... (–≤–∞—à –∫–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã: stop_session, handle_agree, handle_mode_choice) ...

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
@dp.message(F.text, UserState.in_session)
async def handle_session_message(message: Message, state: FSMContext):
    # –õ–û–ì–ò–†–£–ï–ú –°–û–ë–´–¢–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    log_event(message.from_user.id, 'message_sent')
    
    # ... (–≤–∞—à –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)

# --- –ù–û–í–´–ô –•–ï–ù–î–õ–ï–†: –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
@dp.message(Command("stats"))
async def get_stats(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # 1. –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–∂–∞–≤—à–∏—Ö /start
    cursor.execute("SELECT COUNT(DISTINCT user_id) FROM analytics WHERE event_type = 'start_command'")
    start_users = cursor.fetchone()[0]

    # 2. –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT COUNT(DISTINCT user_id) FROM analytics")
    total_users = cursor.fetchone()[0]

    # 3. –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏—Ö –±–æ–ª–µ–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute("""
        SELECT COUNT(*) FROM (
            SELECT user_id FROM analytics 
            WHERE event_type = 'message_sent' 
            GROUP BY user_id 
            HAVING COUNT(*) > 5
        )
    """)
    active_users = cursor.fetchone()[0]

    conn.close()

    stats_text = (
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
        f"‚ñ´Ô∏è **–ù–∞–∂–∞–ª–∏ /start:** {start_users} —á–µ–ª.\n"
        f"‚ñ´Ô∏è **–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users} —á–µ–ª.\n"
        f"‚ñ´Ô∏è **–ê–∫—Ç–∏–≤–Ω—ã–µ (–±–æ–ª–µ–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π):** {active_users} —á–µ–ª."
    )
    await message.answer(stats_text, parse_mode="Markdown")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞) ...

if __name__ == "__main__":
    init_db() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    main()