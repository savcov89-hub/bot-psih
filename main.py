import asyncio
import os
import logging
import sys
import sqlite3
from datetime import datetime, timedelta
import uuid

from dotenv import load_dotenv
from yookassa import Configuration, Payment

from aiogram import Bot, Dispatcher, F, types, BaseMiddleware
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from openai import AsyncOpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ADMIN_ID = os.getenv("ADMIN_ID")
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 8000))

if not all([TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, ADMIN_ID, YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY]):
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

Configuration.configure(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# ... (–í–∞—à–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã CBT_PROMPT –∏ COACH_PROMPT) ...
PLAN_GENERATION_PROMPT = """
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–º–µ—Ç–æ–¥–æ–ª–æ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞, —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –ø–ª–∞–Ω –∏–∑ 3-4 —Å–µ—Å—Å–∏–π.
–í–æ–ø—Ä–æ—Å 1 (–ü—Ä–æ–±–ª–µ–º–∞): {q1}
–í–æ–ø—Ä–æ—Å 2 (–¶–µ–ª—å): {q2}

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã**
–î–∞–ª–µ–µ –ø–æ –ø—É–Ω–∫—Ç–∞–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:
**–°–µ—Å—Å–∏—è 1:** [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏]. [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å].
**–°–µ—Å—Å–∏—è 2:** [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏]. [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ].
**–°–µ—Å—Å–∏—è 3:** [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏]. [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ].
"""

# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
DB_FILE = "bot_data.db"

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS analytics (...)')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            subscription_status TEXT DEFAULT 'free',
            subscription_expires_at DATETIME
        )
    ''')
    conn.commit()
    conn.close()

# ... (–∫–æ–¥ log_event, ensure_user_exists, is_user_subscribed, get_stats_for_period, format_change) ...

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (FSM) ---
class UserJourney(StatesGroup):
    survey_q1 = State()
    survey_q2 = State()
    plan_confirmation = State()
    in_session = State() # –°—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
agree_keyboard = ...
plan_confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å", callback_data="plan_accept")]
])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Handlers) ---
@dp.message(CommandStart())
async def send_welcome(message: Message, state: FSMContext):
    ensure_user_exists(message.from_user.id)
    log_event(message.from_user.id, 'start_command')
    await state.clear()
    # ... (–∫–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è) ...
    await message.answer(welcome_text, reply_markup=agree_keyboard, parse_mode="Markdown")

# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –•–ï–ù–î–õ–ï–†: –ù–ê–ß–ò–ù–ê–ï–ú –û–ü–†–û–°
@dp.callback_query(F.data == "agree_pressed")
async def start_survey(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, –æ—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "**1. –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, –∫–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä—É–¥–Ω–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Å–µ–π—á–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?**"
    , parse_mode="Markdown")
    await state.set_state(UserJourney.survey_q1)
    await callback_query.answer()

# –•–ï–ù–î–õ–ï–† –î–õ–Ø –ü–ï–†–í–û–ì–û –í–û–ü–†–û–°–ê –û–ü–†–û–°–ê
@dp.message(UserJourney.survey_q1)
async def process_survey_q1(message: Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –ò –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å:\n\n"
        "**2. –ö–∞–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ—Å—Ç–∏—á—å –≤ –∏–¥–µ–∞–ª–µ? –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è?**"
    , parse_mode="Markdown")
    await state.set_state(UserJourney.survey_q2)

# –•–ï–ù–î–õ–ï–† –î–õ–Ø –í–¢–û–†–û–ì–û –í–û–ü–†–û–°–ê –ò –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–õ–ê–ù–ê
@dp.message(UserJourney.survey_q2)
async def process_survey_q2_and_generate_plan(message: Message, state: FSMContext):
    await state.update_data(q2=message.text)
    user_data = await state.get_data()
    
    thinking_message = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω... üß†")

    try:
        prompt = PLAN_GENERATION_PROMPT.format(q1=user_data['q1'], q2=user_data['q2'])
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
        )
        plan_text = response.choices[0].message.content

        await thinking_message.edit_text(
            f"{plan_text}\n\n–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=plan_confirm_keyboard,
            parse_mode="Markdown"
        )
        await state.set_state(UserJourney.plan_confirmation)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
        await thinking_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start")
        await state.clear()

# –•–ï–ù–î–õ–ï–† –î–õ–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ü–õ–ê–ù–ê –ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –û–ü–õ–ê–¢–´
@dp.callback_query(F.data == "plan_accept", UserJourney.plan_confirmation)
async def offer_payment(callback_query: types.CallbackQuery, state: FSMContext):
    PRICE = 250.00
    
    payment = Payment.create({
        "amount": {"value": f"{PRICE:.2f}", "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": f"https://t.me/{await bot.get_me().username}"},
        "capture": True,
        "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –Ω–µ–¥–µ–ª—é –¥–ª—è user_id: {callback_query.from_user.id}",
        "metadata": {"user_id": callback_query.from_user.id, "duration_days": 7}
    }, uuid.uuid4())

    payment_url = payment.confirmation.confirmation_url
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å 250 ‚ÇΩ", url=payment_url)]])
    
    await callback_query.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–æ—Å—Ç—É–ø –∫ —Å–µ—Å—Å–∏—è–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
        "**–¢–∞—Ä–∏—Ñ:**\n"
        "‚ñ´Ô∏è **250 —Ä—É–±–ª–µ–π** –∑–∞ 7 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback_query.answer()
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã, –≤–∫–ª—é—á–∞—è /stats, /stop –∏ –≤–µ–±—Ö—É–∫ –¥–ª—è –ÆKassa) ...
# –í–ê–ñ–ù–û: –≤ –≤–µ–±—Ö—É–∫–µ –ÆKassa –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å duration_days –∏–∑ metadata

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
# ... (–∫–æ–¥ main, on_startup, on_shutdown) ...

if __name__ == "__main__":
    init_db()
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)