import asyncio
import os
import logging
import sys
import sqlite3
from datetime import datetime, timedelta
import uuid

from dotenv import load_dotenv
from yookassa import Configuration, Payment
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import Bot, Dispatcher, F, types, BaseMiddleware
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from openai import AsyncOpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ADMIN_ID = os.getenv("ADMIN_ID")
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 8000))

if not all([TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, ADMIN_ID, YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY]):
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –∫–ª—é—á–∏ –ÆKassa")

Configuration.configure(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# --- –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã ---
PLAN_GENERATION_PROMPT = """
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–º–µ—Ç–æ–¥–æ–ª–æ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞, —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –ø–ª–∞–Ω –∏–∑ 3-4 —Å–µ—Å—Å–∏–π.
–í–æ–ø—Ä–æ—Å 1 (–ü—Ä–æ–±–ª–µ–º–∞): {q1}
–í–æ–ø—Ä–æ—Å 2 (–¶–µ–ª—å): {q2}

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã**
–î–∞–ª–µ–µ –ø–æ –ø—É–Ω–∫—Ç–∞–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:
**–°–µ—Å—Å–∏—è 1:** [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏]. [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å].
**–°–µ—Å—Å–∏—è 2:** [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏]. [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ].
**–°–µ—Å—Å–∏—è 3:** [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏]. [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ].
"""

SESSION_PROMPT = """
–¢—ã ‚Äî AI-–ø—Å–∏—Ö–æ–ª–æ–≥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ –º–µ—Ç–æ–¥—É –ö–ü–¢. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –±—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º, —ç–º–ø–∞—Ç–∏—á–Ω—ã–º –∏ –≤–µ—Å—Ç–∏ –µ–≥–æ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω—É.

**–í–æ—Ç –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
{plan}

–ù–∞—á–Ω–∏ –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é. –ü–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è, —É–ø–æ–º—è–Ω–∏ –ø–µ—Ä–≤—É—é —Ç–µ–º—É –∏–∑ –ø–ª–∞–Ω–∞ –∏ –∑–∞–¥–∞–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –µ—ë –æ–±—Å—É–∂–¥–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥ –Ω–∞—á–∞—Ç—å –Ω–∞—à—É —Ä–∞–±–æ—Ç—É. –°–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–µ–º—É –ø–ª–∞–Ω—É, –ø–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è –ø–æ—Å–≤—è—â–µ–Ω–∞ [—Ç–µ–º–∞ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏]. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å –Ω–∞ —É–º–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É?"

–í–µ–¥–∏ –¥–∏–∞–ª–æ–≥, –ø–æ–º–æ–≥–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∑–∞–¥–∞–≤–∞–π –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑.
"""

# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
DB_FILE = "bot_data.db"

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            subscription_status TEXT DEFAULT 'free',
            subscription_expires_at DATETIME,
            yookassa_payment_method_id TEXT,
            session_plan TEXT
        )
    ''')
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
    conn.commit()
    conn.close()

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î: ensure_user_exists, is_user_subscribed) ...

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (FSM) ---
class UserJourney(StatesGroup):
    survey_q1 = State()
    survey_q2 = State()
    plan_confirmation = State()
    waiting_for_promo = State()
    in_session = State()

# ... (–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã) ...

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Handlers) ---
# ... (–ö–æ–¥ –¥–ª—è /start, /promo, /subscription –∏ –¥—Ä—É–≥–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤) ...

# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –•–ï–ù–î–õ–ï–† –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–õ–ê–ù–ê
@dp.message(UserJourney.survey_q2)
async def process_survey_q2_and_generate_plan(message: Message, state: FSMContext):
    await state.update_data(q2=message.text)
    user_data = await state.get_data()
    
    thinking_message = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω... üß†")

    try:
        prompt = PLAN_GENERATION_PROMPT.format(q1=user_data['q1'], q2=user_data['q2'])
        response = await openai_client.chat.completions.create(
            model="gpt-4o", messages=[{"role": "user", "content": prompt}], temperature=0.7
        )
        plan_text = response.choices[0].message.content

        # –°–û–•–†–ê–ù–Ø–ï–ú –ü–õ–ê–ù –í –ë–ê–ó–£ –î–ê–ù–ù–´–•
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET session_plan = ? WHERE user_id = ?", (plan_text, message.from_user.id))
        conn.commit()
        conn.close()

        await thinking_message.edit_text(
            f"{plan_text}\n\n–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=plan_confirm_keyboard, parse_mode="Markdown"
        )
        await state.set_state(UserJourney.plan_confirmation)
    except Exception as e:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫)

# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –í–ï–ë–•–£–ö –ÆKASSA
async def yookassa_webhook_handler(request):
    try:
        event_json = await request.json()
        payment = event_json.get('object')
        
        if payment and payment.get('status') == 'succeeded' and payment.get('paid'):
            user_id = int(payment['metadata']['user_id'])
            # ... (–ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã) ...
            
            # –ò–ó–ú–ï–ù–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            await bot.send_message(user_id, 
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—à—É –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ –≤–∞—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ÆKassa: {e}")
    return web.Response(status=200)

# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô "–õ–û–í–ï–¶ –û–°–¢–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô"
@dp.message()
async def handle_other_messages(message: Message, state: FSMContext):
    is_subscribed = await is_user_subscribed(message.from_user.id)
    current_state = await state.get_state()

    if is_subscribed and current_state is None:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT session_plan FROM users WHERE user_id = ?", (message.from_user.id,))
        result = cursor.fetchone()
        conn.close()

        session_plan = result[0] if result and result[0] else "–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        personalized_prompt = SESSION_PROMPT.format(plan=session_plan)
        
        await state.set_state(UserJourney.in_session)
        await state.update_data(messages=[{"role": "system", "content": personalized_prompt}])

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é AI
        first_message_response = await openai_client.chat.completions.create(
            model="gpt-4o", messages=[{"role": "system", "content": personalized_prompt}], temperature=0.7
        )
        first_message = first_message_response.choices[0].message.content
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await state.update_data(messages=[
            {"role": "system", "content": personalized_prompt},
            {"role": "assistant", "content": first_message}
        ])
        
        await message.answer(first_message)
    else:
        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

# ... (–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: on_startup, on_shutdown, main, –∏ —Ç.–¥.) ...